seq = dict(
    la_adapter_5="CCTGTACTTCGTTCAGTTACGTATTGCT",
    la_adapter_3="AGCAATACGTAACTGAACGAAGTACAGG",
    ra_adapter_5="GCTTGGGTGTTTAACCGTTTTCGCATTTATCGTGAAACGCTTTCGCGTTTTTCGTGCGCCGCTTCA",
    na_adapter_5="CCTGTACTTCGTTCAGTTACGTATTGCT",
    nb_left_flanking_5="AAGGTTAA",
    nb_right_flanking_5="CAGCACCT",
    nb_left_flanking_3="AGGTGCTG",
    nb_right_flanking_3="TTAACCTTAGCAAT",
    na_adapter_3="ACGTAACTGAACGAAGTACAGG",
    rb_left_flanking="GCTTGGGTGTTTAACC",
    rb_right_flanking="GTTTTCGCATTTATCGTGAAACGCTTTCGCGTTTTTCGTGCGCCGCTTCA",
    sspii="TTTCTGTTGGTGCTGATATTGCTTTVVVVTTVVVVTTVVVVTTVVVVTTTGGG",
    crta="CTTGCGGGCGGCGGACTCTCCTCTGAAGATAGAGCGACAGGCAAGT",
    crta_rev_com="ACTTGCCTGTCGCTCTATCTTCAGAGGAGAGTCCGCCGCCCGCAAG",
    sspii_rev_com="CCCAAABBBBAABBBBAABBBBAABBBBAAAGCAATATCAGCACCAACAGAAA",
    NB01="AAGAAAGTTGTCGGTGTCTTTGTG",
    NB02="TCGATTCCGTTTGTAGTCGTCTGT",
    NB03="GAGTCTTGTGTCCCAGTTACCAGG",
    NB04="TTCGGATTCTATCGTGTTTCCCTA",
    NB05="CTTGTCCAGGGTTTGTGTAACCTT",
    NB06="TTCTCGCAAAGGCAGAAAGTAGTC",
    NB07="GTGTTACCGTGGGAATGAATCCTT",
    NB08="TTCAGGGAACAAACCAAGTTACGT",
    NB09="AACTAGGCACAGCGAGTCTTGGTT",
    NB10="AAGCGTTGAAACCTTTGTCCTCTC",
    NB11="GTTTCATCTATCGGAGGGAATGGA",
    NB12="CAGGTAGAAAGAAGCAGAATCGGA",
    NB13="TCACACGAGTATGGAAGTCGTTCT",
    NB14="TCTATGGGTCCCAAGAGACTCGTT",
    NB15="CAGTGGTGTTAGCGAGGTAGACCT",
    NB16="AGTACGAACCACTGTCAGTTGACG",
    NB17="ATCAGAGGTACTTTCCTGGAGGGT",
    NB18="GCCTATCTAGGTTGTTGGGTTTGG",
    NB19="ATCTCTTGACACTGCACGAGGAAC",
    NB20="ATGAGTTCTCGTAACAGGACGCAA",
    NB21="TAGAGAACGGACAATGAGAGGCTC",
    NB22="CGTACTTTGATACATGGCAGTGGT",
    NB23="CGAGGAGGTTCACTGGGTAGTAAG",
    NB24="CTAACCCATCATGCAGAACTATGC",
    NB25="CATTGCGTTGCATACCCAACTTAC",
    NB26="ATGAGAATGCGTAGTCGCTGTATG",
    NB27="TGTAAGAGGTGAATCTAACCGTCG",
    NB28="GATACGGTGCCTTCTTAGGTTTCA",
    NB29="GGTCTGTCAACCCAAGGTGTCTAG",
    NB30="TGGGTCGAAGTAGATCCTCACTGA",
    NB31="CAATGTAACTGATTGCTGTACGCA",
    NB32="ATGACGTTGTCGGACTTCTACTGG",
    NB33="AGTTACCCAACCGTACCAAGTCTG",
    NB34="GCCTTTGACTTGAGTTCTTCGTCC",
    NB35="GCAGTCCCTCAGCTTCGTAAGTAG",
    NB36="TGTTTCCTCCTCTAACTGGGACAT",
    NB37="TGATACTAAGCATCAATCGCAAGC",
    NB38="TTCTCTGTATCGTCCTCCTGTGGT",
    NB39="GAGAGGCTCTAGTTGACACTGTGG",
    NB40="GGCTATCCTTGGTCATCCAAACTA",
    NB41="CGTGTACTTCTCTGGACGAACTCC",
    NB42="CTGGCAGGTATGCCTTACACGTAG",
    NB43="CTACCGTCGAGTCAACAACGAAAG",
    NB44="GAGTGGGAAGGAACCCTTTCTACT",
    NB45="CACTGAAGGCATCTCTGTTGGATC",
    NB46="CAGGAGAATGAAGTGGAACACAGC",
    NB47="GAACTACCTGTGGGAAAGTTGCAC",
    NB48="TACAGGTGTACCACGTTCCAGATG",
    NB49="CTAGATGTTCAAAGCTGCACCAGT",
    NB50="ACGCAGGAAGTTACCAAAGTCCAT",
    NB51="GAGGACCCAGTAGGCTCATTCAAC",
    NB52="GTCCACGAACAATCTTGTCTCTCA",
    NB53="CTTTGCATGAGACGGTCTGAATCT",
    NB54="CATGCTCCTTAGTCAAAGCTCTTG",
    NB55="CGTAGATCAGGGTCTCATCTTCCA",
    NB56="TTCATGCCACCTGTTGAGTAGTGA",
    NB57="ACTTCCGAAGGAGATTGACCTAGC",
    NB58="TCAGACTCACGGAGGAGTAACCTG",
    NB59="ACCTTGCTTTCCCTTCTTGATTGA",
    NB60="CCATAGAAGCCTTGGTTGAACATG",
    NB61="GTGCTGAGGCACATAGTACCCTCT",
    NB62="TACGTCCTGAAGTAAGTGTGGGTG",
    NB63="GTTCAAGACCCAGGAACTTCAGAA",
    NB64="GAAAGTCGATGAACGGTGTCTGTC",
    NB65="CCTTGTCTGGAGGAAGACTGAGAA",
    NB66="GAAGTTAGAAGCCACAAGGATCGG",
    NB67="GGTGAGCACACGAGTATGACAAAC",
    NB68="CCACCTTCGTGTTTGCTTAGATTC",
    NB69="AGATCACATGAGGCTCGGACTGTA",
    NB70="ACACTCCATTCGTAGGATCTCGGT",
    NB71="CTGTTACTACCTGATGCTCCCAGG",
    NB72="GTCGGTATGGAAGACAGTCAGCTA",
    NB73="GAGGGTTCTGTCATCCTGTTTCTT",
    NB74="AGTGGAAGTGTTGGGATGCTTGTA",
    NB75="ACAACAGGGTTCATCACAATGGTC",
    NB76="GTCCAGGGTTGATGTAACAAGCAT",
    NB77="GTTGTATCCCTGAGAAACAGGTCG",
    NB78="TTCTGATTCAAAGGTTCGGTTGTT",
    NB79="CAGCAGTGAGAACTATCTCCGAGA",
    NB80="GAATCGCTATCCTATGTTCATCCG",
    NB81="CCGAAACAACTTCACAAGATGAGG",
    NB82="TAGTCCTGGAACTCGACATACCGT",
    NB83="TTCGACCTTACCTAGATCAAGCCA",
    NB84="TGGCACAGGTTCTAGGTCCACTAC",
    NB85="GATCATCCAACTAACTCCTCCGTT",
    NB86="TACTTACGCTTGTTGGGATCACCT",
    NB87="CCTCCCTAACAACAGGAGCATGTA",
    NB88="CTGCTTCGGATCGGTAGTAGAAGA",
    NB89="CAACTAGCCAAACATTGATGCTGT",
    NB90="GCCTCAAACCGTACCCTCTACATC",
    NB91="AGTAGCGTGAGTTCCTATGGAGCC",
    NB92="GGTCCTGTATCTTTCCACTCACAA",
    NB93="CCCAAGTCTGAAGTGATGGAAACT",
    NB94="GTAGGTGGCAGTTTGAGGACAATC",
    NB95="AAGTCCATTCTTCTTCCAGACAGG",
    NB96="ATGGTGGACTCTATGACCGTTCAG",
    RB01="AAGAAAGTTGTCGGTGTCTTTGTG",
    RB02="TCGATTCCGTTTGTAGTCGTCTGT",
    RB03="GAGTCTTGTGTCCCAGTTACCAGG",
    RB04="TTCGGATTCTATCGTGTTTCCCTA",
    RB05="CTTGTCCAGGGTTTGTGTAACCTT",
    RB06="TTCTCGCAAAGGCAGAAAGTAGTC",
    RB07="GTGTTACCGTGGGAATGAATCCTT",
    RB08="TTCAGGGAACAAACCAAGTTACGT",
    RB09="AACTAGGCACAGCGAGTCTTGGTT",
    RB10="AAGCGTTGAAACCTTTGTCCTCTC",
    RB11="GTTTCATCTATCGGAGGGAATGGA",
    RB12="CAGGTAGAAAGAAGCAGAATCGGA",
    RB13="AGAACGACTTCCATACTCGTGTGA",
    RB14="AACGAGTCTCTTGGGACCCATAGA",
    RB15="AGGTCTACCTCGCTAACACCACTG",
    RB16="CGTCAACTGACAGTGGTTCGTACT",
    RB17="ACCCTCCAGGAAAGTACCTCTGAT",
    RB18="CCAAACCCAACAACCTAGATAGGC",
    RB19="GTTCCTCGTGCAGTGTCAAGAGAT",
    RB20="TTGCGTCCTGTTACGAGAACTCAT",
    RB21="GAGCCTCTCATTGTCCGTTCTCTA",
    RB22="ACCACTGCCATGTATCAAAGTACG",
    RB23="CTTACTACCCAGTGAACCTCCTCG",
    RB24="GCATAGTTCTGCATGATGGGTTAG",
    RB25="GTAAGTTGGGTATGCAACGCAATG",
    RB26="CATACAGCGACTACGCATTCTCAT",
    RB27="CGACGGTTAGATTCACCTCTTACA",
    RB28="TGAAACCTAAGAAGGCACCGTATC",
    RB29="CTAGACACCTTGGGTTGACAGACC",
    RB30="TCAGTGAGGATCTACTTCGACCCA",
    RB31="TGCGTACAGCAATCAGTTACATTG",
    RB32="CCAGTAGAAGTCCGACAACGTCAT",
    RB33="CAGACTTGGTACGGTTGGGTAACT",
    RB34="GGACGAAGAACTCAAGTCAAAGGC",
    RB35="CTACTTACGAAGCTGAGGGACTGC",
    RB36="ATGTCCCAGTTAGAGGAGGAAACA",
    RB37="GCTTGCGATTGATGCTTAGTATCA",
    RB38="ACCACAGGAGGACGATACAGAGAA",
    RB39="CCACAGTGTCAACTAGAGCCTCTC",
    RB40="TAGTTTGGATGACCAAGGATAGCC",
    RB41="GGAGTTCGTCCAGAGAAGTACACG",
    RB42="CTACGTGTAAGGCATACCTGCCAG",
    RB43="CTTTCGTTGTTGACTCGACGGTAG",
    RB44="AGTAGAAAGGGTTCCTTCCCACTC",
    RB45="GATCCAACAGAGATGCCTTCAGTG",
    RB46="GCTGTGTTCCACTTCATTCTCCTG",
    RB47="GTGCAACTTTCCCACAGGTAGTTC",
    RB48="CATCTGGAACGTGGTACACCTGTA",
    RB49="ACTGGTGCAGCTTTGAACATCTAG",
    RB50="ATGGACTTTGGTAACTTCCTGCGT",
    RB51="GTTGAATGAGCCTACTGGGTCCTC",
    RB52="TGAGAGACAAGATTGTTCGTGGAC",
    RB53="AGATTCAGACCGTCTCATGCAAAG",
    RB54="CAAGAGCTTTGACTAAGGAGCATG",
    RB55="TGGAAGATGAGACCCTGATCTACG",
    RB56="TCACTACTCAACAGGTGGCATGAA",
    RB57="GCTAGGTCAATCTCCTTCGGAAGT",
    RB58="CAGGTTACTCCTCCGTGAGTCTGA",
    RB59="TCAATCAAGAAGGGAAAGCAAGGT",
    RB60="CATGTTCAACCAAGGCTTCTATGG",
    RB61="AGAGGGTACTATGTGCCTCAGCAC",
    RB62="CACCCACACTTACTTCAGGACGTA",
    RB63="TTCTGAAGTTCCTGGGTCTTGAAC",
    RB64="GACAGACACCGTTCATCGACTTTC",
    RB65="TTCTCAGTCTTCCTCCAGACAAGG",
    RB66="CCGATCCTTGTGGCTTCTAACTTC",
    RB67="GTTTGTCATACTCGTGTGCTCACC",
    RB68="GAATCTAAGCAAACACGAAGGTGG",
    RB69="TACAGTCCGAGCCTCATGTGATCT",
    RB70="ACCGAGATCCTACGAATGGAGTGT",
    RB71="CCTGGGAGCATCAGGTAGTAACAG",
    RB72="TAGCTGACTGTCTTCCATACCGAC",
    RB73="AAGAAACAGGATGACAGAACCCTC",
    RB74="TACAAGCATCCCAACACTTCCACT",
    RB75="GACCATTGTGATGAACCCTGTTGT",
    RB76="ATGCTTGTTACATCAACCCTGGAC",
    RB77="CGACCTGTTTCTCAGGGATACAAC",
    RB78="AACAACCGAACCTTTGAATCAGAA",
    RB79="TCTCGGAGATAGTTCTCACTGCTG",
    RB80="CGGATGAACATAGGATAGCGATTC",
    RB81="CCTCATCTTGTGAAGTTGTTTCGG",
    RB82="ACGGTATGTCGAGTTCCAGGACTA",
    RB83="TGGCTTGATCTAGGTAAGGTCGAA",
    RB84="GTAGTGGACCTAGAACCTGTGCCA",
    RB85="AACGGAGGAGTTAGTTGGATGATC",
    RB86="AGGTGATCCCAACAAGCGTAAGTA",
    RB87="TACATGCTCCTGTTGTTAGGGAGG",
    RB88="TCTTCTACTACCGATCCGAAGCAG",
    RB89="ACAGCATCAATGTTTGGCTAGTTG",
    RB90="GATGTAGAGGGTACGGTTTGAGGC",
    RB91="GGCTCCATAGGAACTCACGCTACT",
    RB92="TTGTGAGTGGAAAGATACAGGACC",
    RB93="AGTTTCCATCACTTCAGACTTGGG",
    RB94="GATTGTCCTCAAACTGCCACCTAC",
    RB95="CCTGTCTGGAAGAAGAATGGACTT",
    RB96="CTGAACGGTCATAGAGTCCACCAT",
    # lsk_end5 = (100, 0.5, 0.75), # CCTGTACTTCGTTCAGTTACGTATTGCT 28
    # lsk_end3 = (80, 0.5, 0.75),# AGCAATACGTAACTGAACGAAGTACAGG 28
    # nbd_end5 = (150, 0.6, 0.75), # AAGGTTAA CACAAAGACACCGACAACTTTCTT CAGCACCT 40
    # nbd_end3 = (120, 0.6, 0.75), # GGTGCTG AAGAAAGTTGTCGGTGTCTTTGTG TTAACCTTAGCAAT 45
    # rad_end5 = (180, 0.5, 0.75), # GCTTGGGTGTTTAACC GTTTTCGCATTTATCGTGAAACGCTTTCGCGTTTTTCGTGCGCCGCTTCA 50
    # rbk_end5 = (180, 0.5, 0.75), # AAGAAAGTTGTCGGTGTCTTTGTG GTTTTCGCATTTATCGTGAAACGCTTTCGCGTTTTTCGTGCGCCGCTTCA 74
    # pcs_end5 = (150, 0.6, 0.75), # TTTCTGTTGGTGCTGATATTGCTTTVVVVTTVVVVTTVVVVTTVVVVTTTGGG 53
    # pcs_end3 = (150, 0.4, 0.75), # CTTGCGGGCGGCGGACTCTCCTCTGAAGATAGAGCGACAGGCAAG 45
    # pcs_rev_com_end5 = (150, 0.6, 0.75), # CTTGCCTGTCGCTCTATCTTCAGAGGAGAGTCCGCCGCCCGCAAG 45
    # pcs_rev_com_end3 = (150, 0.4, 0.75), # AAAGACAACCACGACTATAACGAAABBBBAABBBBAABBBBAABBBBAAACCC 53
    # pcb_end5 = (180, 0.4, 0.75), # AAGAAAGTTGTCGGTGTCTTTGTG TTTCTGTTGGTGCTGATATTGCTTTVVVVTTVVVVTTVVVVTTVVVVTTTGGG 77
    # pcb_end3 = (180, 0.3, 0.75), # CTTGCGGGCGGCGGACTCTCCTCTGAAGATAGAGCGACAGGCAAGT CACAAAGACACCGACAACTTTCTT 71
    # pcb_rev_com_end5 = (180, 0.5, 0.75), #AAGAAAGTTGTCGGTGTCTTTGTG ACTTGCCTGTCGCTCTATCTTCAGAGGAGAGTCCGCCGCCCGCAAG 71
    # pcb_rev_com_end3 = (180, 0.3, 0.75),
)


def rev_com(seq):
    s = []
    for char in seq[::-1]:
        if char == "A":
            s.append("T")
        elif char == "G":
            s.append("C")
        elif char == "C":
            s.append("G")
        else:
            s.append("A")
    return "".join(s)


def get_adapter():
    print(f"const LSK: SequenceInfo = SequenceInfo {{name: \"LSK\", end5: (\"{seq['la_adapter_5']}\", LSK_END5 ), end3: Some((\"{seq['la_adapter_3']}\", LSK_END3)), rev_com_end5: None, rev_com_end3: None }};")
    print(f"const RAD: SequenceInfo = SequenceInfo {{name: \"RAD\", end5: (\"{seq['ra_adapter_5']}\", RAD_END5), end3: None, rev_com_end5: None, rev_com_end3: None  }};")
    print(f"const ULK: SequenceInfo = SequenceInfo {{name: \"ULK\", end5: (\"{seq['ra_adapter_5']}\", RAD_END5), end3: None, rev_com_end5: None, rev_com_end3: None  }};")
    print(f"const PCS: SequenceInfo = SequenceInfo {{name: \"PCS\", end5: (\"{seq['sspii']}\", PCS_END5), end3: Some((\"{seq['crta']}\", PCS_END3 )), rev_com_end5: Some((\"{seq['crta_rev_com']}\", PCS_REV_COM_END5)), rev_com_end3: Some((\"{seq['sspii_rev_com']}\", PCS_REV_COM_END3))  }};")
    for i in range(1, 97):
        nb_name = f"NB{i}" if len(str(i)) == 2 else f"NB0{i}"
        nbd_end5 = f"{seq['nb_left_flanking_5']}{rev_com(seq[nb_name])}{seq['nb_right_flanking_5']}"
        nbd_end3 = f"{seq['nb_left_flanking_3']}{seq[nb_name]}{seq['nb_right_flanking_3']}"
        print(f"const NBD_{i}: SequenceInfo = SequenceInfo {{name: \"NBD_{i}\", end5: (\"{nbd_end5}\", NBD_END5), end3: Some((\"{nbd_end3}\", NBD_END3)), rev_com_end5: None, rev_com_end3: None }};")
    for i in range(1, 97):
        rb_name = f"RB{i}" if len(str(i)) == 2 else f"RB0{i}"
        rb_end5 = f"{seq[rb_name]}{seq['rb_right_flanking']}"
        print(f"const RBK_{i}: SequenceInfo = SequenceInfo {{name: \"RBK_{i}\", end5: (\"{rb_end5}\", RBK_END5), end3: None, rev_com_end5: None, rev_com_end3: None    }};")

    for i in range(1,25):
        rb_name = f"RB{i}" if len(str(i)) == 2 else f"RB0{i}"
        pcb_end5 = f"{seq[rb_name]}{seq['sspii']}"
        pcb_end3 = f"{seq['crta']}{rev_com(seq[rb_name])}"
        pcb_rev_com_end5 = f"{seq[rb_name]}{seq['crta_rev_com']}"
        pcb_rev_com_end3 = f"{seq["sspii_rev_com"]}{rev_com(seq[rb_name])}"
        print(
            f"const PCB_{i}: SequenceInfo = SequenceInfo {{name: \"PCB_{i}\", end5: (\"{pcb_end5}\", PCB_END5), end3: Some((\"{pcb_end3}\", PCB_END3)), rev_com_end5: Some((\"{pcb_rev_com_end5}\", PCB_REV_COM_END5)), rev_com_end3: Some((\"{pcb_rev_com_end3}\", PCB_REV_COM_END3)) }};")


def print_kit_vs_seq_info():
    print("(\"LSK\", &LSK),")
    print("(\"RAD\", &RAD),")
    print("(\"ULK\", &ULK),")
    for i in range(1, 97):
        print(f"(\"NBD_{i}\", &NBD_{i}),")

    for i in range(1, 97):
        print(f"(\"RBK_{i}\", &RBK_{i}),")

    print("(\"PCS\", &PCS), ")
    for i in range(1,25):
        print(f"(\"PCB_{i}\", &PCB_{i}),")
    pass

if __name__ == '__main__':
    # get_adapter()
    print_kit_vs_seq_info()
